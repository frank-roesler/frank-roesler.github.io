<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Frank Rösler</title>
    <link>https://frank-roesler.github.io/de/</link>
    <description>Recent content in Home on Frank Rösler</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 May 2020 11:51:44 +0100</lastBuildDate><atom:link href="https://frank-roesler.github.io/de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Forschung</title>
      <link>https://frank-roesler.github.io/de/research/</link>
      <pubDate>Tue, 26 May 2020 11:53:04 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/research/</guid>
      <description>Publikationen und Preprints Preprints:  Frank Rösler, Alexei Stepanenko; Computing Eigenvalues of the Laplacian on Rough Domains, Preprint, arXiv:2104.09444.
(Eine Matlab-Implementierung des Algorithmus gibt es hier) Jonathan Ben-Artzi, Marco Marletta, Frank Rösler; Computing Scattering Resonances. Preprint, arXiv:2006.03368  Peer-Reviewed:  Jonathan Ben-Artzi, Marco Marletta, Frank Rösler; Universal Algorithms for Computing Spectra of Periodic Operators, Numer. Math. (2022).
Eine Matlab-Implementierung des Algorithmus gibt es hier. Jonathan Ben-Artzi, Marco Marletta, Frank Rösler; Computing the Sound of the Sea in a Seashell.</description>
    </item>
    
    <item>
      <title>Lehre</title>
      <link>https://frank-roesler.github.io/de/teaching/</link>
      <pubDate>Tue, 26 May 2020 14:23:52 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/teaching/</guid>
      <description>Wintersemester 2019/20  Vorlesung über Maßtheorie an der Universität Cardiff.  Handgeschriebenes Vorlesungsskript: Maßtheorie Videos der gesamten Vorlesung sind frei verfügbar: Measure Theory Cardiff 2019    Sommersemester 2018  Assistent für die Vorlesung &amp;ldquo;Analysis 2&amp;rdquo; von Prof. M. Růžička an der Universität Freiburg.  Wintersemester 2017/18  Assistent für die Vorlesung &amp;ldquo;Analysis 1&amp;rdquo; von Prof. M. Růžička an der Universität Freiburg.  Sommersemester 2017  Lesekurs über den Spektralsatz für kompakte, beschränkte und unbeschränkte selbstadjungierte Operatoren auf Hilberträumen an der Universität Freiburg.</description>
    </item>
    
    <item>
      <title>CV</title>
      <link>https://frank-roesler.github.io/de/cv/</link>
      <pubDate>Tue, 26 May 2020 14:30:19 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/cv/</guid>
      <description>Grants und Preise  2020: 2-Jahre Marie Skłodowska Curie Fellowship für das Projekt Computational Complexity in Quantum Mechanics (COCONUT) an der Universität Cardiff. 2019: LMS Scheme 1 Conference Grant (amount £4,000) für den Workshop &amp;ldquo;Small Scales and Homogenisation&amp;rdquo; 2015: EPS Poster Prize, verliehen von der European Physical Society, im Rahmen des Workshops Pseudo-Hermitian Hamiltonians in Quantum Physics.  Ausbildung und Abschlüsse  2018-: Wissenschaftlicher Mitarbeiter / Marie Curie Fellow, School of Mathematics, Cardiff University, Cardiff, UK.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://frank-roesler.github.io/de/links/</link>
      <pubDate>Tue, 26 May 2020 14:32:05 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/links/</guid>
      <description>Diese Seite enthält Links zu aktuellen Events und Arbeiten, die für mich gegenwärtig von Interesse sind.
Cardiff Online Analysis Seminar (CAOS): Während der COVID-19 Beschränkungen organisiert Cardiff ein online-Analysis-Seminar: https://jbenartzi.github.io/seminars.html
(Related: Eine Große Zahl von online-Forschungsseminaren ist hier aufgelistet: https://researchseminars.org/)
Springer E-Books: Springer hat kürzlich über 400 E-Books kostenlos zum Download zur Verfügung gestellt: https://www.reddit.com/r/FreeEBOOKS/comments/g34xi5/408_free_ebooks_from_springer/
Forschungsprojekte:  COCONUT: Computational Complexity in Quantum Mechanics QUEST@Cardiff: https://cardiffquest.blog/ Jonathan Ben-Artzi (Gruppenleiter): https://jbenartzi.github.io/research.html  Konferenzen und Workshops: Anstehend:  15th International Conference on Mathematical and Numerical Aspects of Wave Propagation: Waves 2022 25-29 Juli 2022, Paris, Frankreich.</description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/miscellaneous/</link>
      <pubDate>Tue, 26 May 2020 15:13:25 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/miscellaneous/</guid>
      <description>Hier sammle ich einige kleine mathematische Simulationen, die ich als Hobby programmiert habe. Alle Simulationen sind simple Matlab- bzw. Python-Implementierungen und die zugehörigen Codes sind frei verfügbar auf Github.</description>
    </item>
    
    <item>
      <title>Kontakt</title>
      <link>https://frank-roesler.github.io/de/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank-roesler.github.io/de/contact/</guid>
      <description>Bitte benutzen Sie dieses Formular, um mich zu kontaktieren.
Dein Name Email Adresse Eine Email Adresse wird benötigt.  Nachricht   </description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/perfdom/</link>
      <pubDate>Sun, 16 Aug 2020 21:06:16 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/perfdom/</guid>
      <description>Homogenisierung in perforierten Gebieten Diffusion in einem Gebiet mit periodisch verteilten Hindernissen kann makroskopisch durch eine reduzierte Diffusionskonstante angenähert werden. Diese sogenannte homohenisierte Konstante kann numerisch berechnet werden, indem man eine Differentialgleichung in einer einzigen Zelle löst. Die klassische Theorie wurde in diesem Artikel entwickelt.
Zwei unterschiedliche Berechnungsmethoden habe ich in Matlab implementiert. Das Bild zeigt die Lösung der Gleichung in einer Zelle mit kreisrundem Hindernis.
Der Quellcode ist frei verfügbar auf https://github.</description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/sir/</link>
      <pubDate>Sun, 16 Aug 2020 21:06:16 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/sir/</guid>
      <description>Fit SIR-Modell Als kleines Python-Lernprojekt habe ich dieses kleine Programm geschrieben, das simulierte Daten für eine Infektionswelle in einer population generiert und dann ein einfaches SIR-Modell fittet. Der User kann auf einer grafischen Benutzeroberfläche zwischen zwei fit-Methoden wählen (Methode des steilsten Abstiegs bzw. konjugierte Gradienten).
Der Quellcode ist frei verfügbar auf https://github.com/frank-roesler/SIR_fit
 </description>
    </item>
    
    <item>
      <title>Miscellaneous</title>
      <link>https://frank-roesler.github.io/de/reinforcement/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/reinforcement/</guid>
      <description>Reinforcement Learning Reinforcement Learning ist eine Methode, Computern beizubringen, Kontrollaufgaben zu lösen. Neuronale Netzwerke sind hier in modernen Anwengungen ein wichtiger Baustein. Hier stelle ich einen Algorithmus namend &amp;ldquo;Deep Q-Network&amp;rdquo; (DQN) vor, den ich implementiert habe, um das klassische TicTacToe (X gegen O) Spiel zu spielen.
Kurz gesagt funktioniert ein DQN-Algorithmus, indem er jedem Zustand des Spielfeldes (d.h. jeder Anordnung von X und O) und jedem möglichen Spielzug einen Nutzen zuordnet.</description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/flatten/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/flatten/</guid>
      <description>Flatten the curve Um die &amp;ldquo;flatten the curve&amp;rdquo;-Strategie gegen COVID-19 zu veranschaulichen, habe ich diese kleine Simulation in Python programmiert. Blaue Punkte stehen für gesunde Individuen, rote Punkte für infizierte. Wenn ein blauer Punkt einem roten zunahe kommt, wird er infiziert (und damit infektiös). Nach einer bestimmten Zeit genesen infizierte Punkte von alleine. Man sieht, dass diese einfache Dynamik global zu einer Art Welle führt.
Der Code ist hier: https://github.com/frank-roesler/Files/blob/master/Flatten_curve.py</description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/radon/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/radon/</guid>
      <description>Inverse Radon-Transformation Die Radon-Transformation ist eine mathematische Abbildung, mit wichtigen Anwendungen in der medizinischen Physik. Sie beschreibt die Rohdaten, die bei einer Röntgen- oder CT-Messung entstehen (sogenannte Sinogramme). Die inverse Radon-Transformation (IRT) erlaubt die Rekonstruktion des ursprünglichen Bildes aus dem Sinogramm und ist damit von zentraler Bedeutung für das Erstellen von Röntgen- und CT-Bildern. Eine MATLAB-Funktion, die diese Rekonstruktion automatisch berechnet, habe ich programmiert und auf meiner GitHub-Seite veröffentlicht.
  </description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/reconstruction/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/reconstruction/</guid>
      <description>Bildrekonstruktion Beispiel für Bildrekonstruktion durch &amp;ldquo;Inpainting&amp;rdquo; mit der Wärmeleitungsgleichung. Anfangs sind 97% des Bildes verloren. Benutzt man die verbliebenen Pixel als &amp;ldquo;Randbedingung&amp;rdquo; für einen simulierten Wärmefluss, lässt sich ein großer Teil der Information des Originalbildes zurückgewinnen.
Der Matlab-Code ist hier abrufbar: https://github.com/frank-roesler/Files/blob/master/Inpainting.m   </description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/segmentation/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/segmentation/</guid>
      <description>Bildsegmentierung mit FCNs Auf meiner GitHub-Seite habe ich nun eine &amp;ldquo;fully convolutional&amp;rdquo; (FCN) Version von Alexnet (siehe https://arxiv.org/abs/1411.4038) in Pytorch implementiert. Der Code in diesem Paket hat vor allem ein Ziel: Einfachheit. Erstens erkennt das Modell nur eine Art von Objekt (plus Hintergrund), zweitens sind alle Funktionen und Klassen explizit und transparent; nichts ist vortrainiert. Ziel ist es, die Grundlagen verständlich zu machen
Dieser Code wurde an dem &amp;ldquo;Penn-Fudan&amp;rdquo;-Fußgänger-Datensatz und dem COCO-Datensatz getestet (siehe Bilder).</description>
    </item>
    
    <item>
      <title>Verschiedenes</title>
      <link>https://frank-roesler.github.io/de/turing/</link>
      <pubDate>Mon, 01 Jun 2020 16:49:58 +0100</pubDate>
      
      <guid>https://frank-roesler.github.io/de/turing/</guid>
      <description>Turing-Mechanismus Einfaches Beispiel für &amp;ldquo;Turing pattern formation&amp;rdquo;; programmiert in Matlab. Zwei Lösungen eines gekoppelten Systems partieller Differentialgleichungen konkurrieren, bis sich ein stabiles Gleichgewicht einstellt. Es wird seit langem vermutet, dass dieser Mechanismus der Entstehung der Fellzeichnung von Tieren unterliegt.
Der Matlab-Code ist hier verfügbar: https://github.com/frank-roesler/Files/blob/master/Turing_FinDiff.m   </description>
    </item>
    
  </channel>
</rss>

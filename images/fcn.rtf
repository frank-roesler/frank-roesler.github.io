{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green29\blue164;\red10\green79\blue103;\red9\green9\blue9;
\red18\green51\blue230;\red121\green121\blue121;\red82\green0\blue135;\red0\green0\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c11373\c64314;\csgenericrgb\c3922\c30980\c40392;\csgenericrgb\c3529\c3529\c3529;
\csgenericrgb\c7059\c20000\c90196;\csgenericrgb\c47451\c47451\c47451;\csgenericrgb\c32157\c0\c52941;\csgenericrgb\c0\c0\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 def \cf3 prepare_data\cf4 (low, high, n_clusters, min_distance=\cf5 0\cf4 , plotting=\cf2 False\cf4 , block=\cf2 True\cf4 ):\
    
\f1\i \cf6 """generates clustered simulated data"""\
    
\f0\i0 \cf4 too_narrow = \cf2 True\
    while \cf4 too_narrow:\
        clusters = np.random.multivariate_normal((\cf5 0\cf4 , \cf5 0\cf4 ), \cf5 2 \cf4 * n_clusters * np.eye(\cf5 2\cf4 ), \cf7 size\cf4 =n_clusters)\
        dists = np.zeros((n_clusters,n_clusters))\
        \cf2 for \cf4 i \cf2 in \cf8 range\cf4 (n_clusters):\
            \cf2 for \cf4 j \cf2 in \cf8 range\cf4 (i):\
                dists[i,j] = np.linalg.norm(clusters[i,:] - clusters[j,:])\
        idx = np.tril_indices(n_clusters, \cf7 k\cf4 =-\cf5 1\cf4 )\
        \cf2 if \cf4 np.min(dists[idx])>min_distance:\
            too_narrow = \cf2 False\
    \cf4 d_list = []\
    \cf2 for \cf4 i \cf2 in \cf8 range\cf4 (clusters.shape[\cf5 0\cf4 ]):\
        c1,c4 = \cf5 1 \cf4 + \cf5 0.1\cf4 *np.random.randn(\cf5 2\cf4 )\
        c2,c3 = \cf5 0.1\cf4 *np.random.randn(\cf5 2\cf4 )\
        cor = \cf5 0.5\cf4 *np.array([[c1,c2],[c3,c4]])\
        \cf2 while not \cf4 (np.all(np.linalg.eigvals(cor) > \cf5 0.01\cf4 )):\
            cor += \cf5 0.1\cf4 *np.eye(\cf5 2\cf4 )\
        n_points = randint(low, high)\
        d = np.random.multivariate_normal(clusters[i,:], cor, \cf7 size\cf4 =n_points)\
        d_list.append(d)\
\
    data = np.vstack(d_list)\
    np.random.shuffle(data)\
    \cf2 if \cf4 plotting:\
        fig, ax = plt.subplots()\
        \cf2 for \cf4 d \cf2 in \cf4 d_list:\
            ax.scatter(d[:,\cf5 0\cf4 ], d[:,\cf5 1\cf4 ], \cf7 s\cf4 =\cf5 2\cf4 )\
        ax.scatter(clusters[:,\cf5 0\cf4 ], clusters[:,\cf5 1\cf4 ], \cf7 s\cf4 =\cf5 20\cf4 )\
        plt.show(\cf7 block \cf4 = block)\
\
        \cf2 return \cf4 data, clusters, ax\
    \cf2 else\cf4 :\
        \cf2 return \cf4 data, clusters\
\
}